import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, FSInputFile
from pyairtable import Api
from datetime import timezone

TOKEN = "7018906512:AAGIZv1bbvOdabOwimN6F7kNmwZMqPQqqJo"
ADMIN_ID = 7029037184
GROUP_ID = -1002858230612
ADMINS = [7029037184, 1391901108, 989906193]  # —Å–ø–∏—Å–æ–∫ Telegram ID –∞–¥–º–∏–Ω–æ–≤

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Airtable
AIRTABLE_API_KEY = 'patR5ePq6DfwMWknr.798939b3dff4003934788bab3afc96caef64b951a44b82282ea38f2d85866d62'  # –ù–∞–π—Ç–∏ –≤ Airtable API docs
AIRTABLE_BASE_ID = 'app4OuxtRjXGQCNQx'  # –ò–∑ URL –≤–∞—à–µ–π –±–∞–∑—ã
AIRTABLE_TABLE_NAME = 'dialog-istini'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Airtable
airtable = Api(AIRTABLE_API_KEY)
users_table = airtable.table(AIRTABLE_BASE_ID, AIRTABLE_TABLE_NAME)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())


class SubscribeSteps(StatesGroup):
    choosing_period = State()
    getting_email = State()
    getting_fullname = State()
    getting_phone = State()
    getting_city = State()
    waiting_payment = State()
    admin_cancel = State()
    admin_search = State()
    admin_broadcast = State()
    admin_manual_add_id = State()
    admin_manual_add_username = State()
    admin_manual_add_days = State()
    getting_email_trial = State()

async def get_user(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Airtable"""
    records = users_table.all(formula=f"{{user_id}} = {user_id}")
    return records[0] if records else None

async def update_user(user_id: int, fields: dict):
    """–û–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    record = await get_user(user_id)
    if record:
        users_table.update(record['id'], fields)
    else:
        users_table.create({'user_id': user_id, **fields})

async def check_trial_used(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (—á–µ—Ä–µ–∑ Airtable)"""
    record = users_table.first(formula=f"{{user_id}} = {user_id}")
    if record and "end_date" in record["fields"]:
        end_date = datetime.fromisoformat(record["fields"]["end_date"]).astimezone()
        return end_date > datetime.now().astimezone()
    return False

async def get_main_menu_kb(user_id: int):
    buttons = [
        [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ")],
    ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    record = users_table.first(formula=f"{{user_id}} = {user_id}")
    now = datetime.now().astimezone()

    show_trial = True
    show_renew = False

    if record:
        fields = record.get("fields", {})
        end_date_str = fields.get("end_date")
        if end_date_str:
            try:
                end_date = datetime.fromisoformat(end_date_str).astimezone()
                if end_date > now:
                    show_trial = False  # –£–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞
                    show_renew = True   # –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å
            except:
                pass
        if fields.get("trial_used", False):
            show_trial = False

    if show_trial:
        buttons.append([KeyboardButton(text="üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (5 –¥–Ω–µ–π)")])

    buttons.append([KeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")])

    if show_renew:
        buttons.append([KeyboardButton(text="üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")])

    buttons.append([KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")])

    if user_id in ADMINS:
        buttons.append([KeyboardButton(text="üõ†Ô∏è –ê–¥–º–∏–Ω-–º–µ–Ω—é")])

    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

period_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="1 –º–µ—Å 1.344 —Ä—É–±."),
         KeyboardButton(text="3 –º–µ—Å 3.744 —Ä—É–±.")],
        [KeyboardButton(text="6 –º–µ—Å 6.994 —Ä—É–±."),
         KeyboardButton(text="12 –º–µ—Å +–º–µ—Å. –ø–æ–¥–∞—Ä–æ–∫ 13.444 —Ä—É–±.")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

cancel_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
    resize_keyboard=True
)

admin_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")],
        [KeyboardButton(text="üîÑ –ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
        [KeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –ø–æ username")],
        [KeyboardButton(text="üì§ –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")],
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –≤—Ä—É—á–Ω—É—é")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)
@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    await state.clear()
    video_note = FSInputFile("video_note.mp4")  # –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º video_note (–∫—Ä—É–≥–ª–æ–µ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ)
    await bot.send_video_note(chat_id=message.chat.id, video_note=video_note)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è")]], resize_keyboard=True)
    await message.answer("–ù–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=kb)

@dp.message(F.text == "üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def renew_subscription(message: Message, state: FSMContext):
    await subscribe(message, state)

@dp.message(F.text == "–î–∞–ª–µ–µ ‚û°Ô∏è")
async def send_intro(message: Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ–±—É—á–µ–Ω–∏–∏")],
            [KeyboardButton(text="–•–æ—á—É –≤ –∫–ª—É–±")]
        ],
        resize_keyboard=True
    )

    photo = FSInputFile("aysha_photo.jpg")  # –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ

    text = (
        "–ê–π—à–∞ –≠—Å–∫–µ—Ä—Ö–∞–Ω–æ–≤–∞ - –†–µ–ª–∏–≥–∏–æ–∑–Ω—ã–π —É—á–∏—Ç–µ–ª—å\n\n"
        "‚úÖ 15 –ª–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è –∏—Å–ª–∞–º–∞: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –Ø—Ä–æ—Å–ª–∞–≤–ª—å, –ì—Ä–æ–∑–Ω—ã–π, –ò–Ω–≥—É—à–µ—Ç–∏—è, –î–∞–≥–µ—Å—Ç–∞–Ω –∏ –¥—Ä—É–≥–∏–µ;\n"
        "‚úÖ –û–∫–æ–Ω—á–∏–ª–∞ –ò—Å–ª–∞–º—Å–∫–∏–π —Ç–µ—Ö–Ω–∏–∫—É–º, –æ–±—É—á–∞—é—Å—å –≤ –ò—Å–ª–∞–º—Å–∫–æ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ –∏–º–µ–Ω–∏ –ö—É–Ω—Ç–∞-–•–∞–¥–∂–∏ (–ì—Ä–æ–∑–Ω—ã–π), –æ–±—É—á–∞–ª–∞—Å—å —É —à–µ–π—Ö–æ–≤\n"
        "‚úÖ –û–±—É—á–∏–ª–∞ –±–æ–ª–µ–µ 10.000 –∂–µ–Ω—â–∏–Ω –∏ –¥–µ—Ç–µ–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω, 100+ –ø—Ä–∏–Ω—è–ª–∏ –ò—Å–ª–∞–º\n\n"
        "–ö–ª—É–± ¬´–î–∏–∞–ª–æ–≥ –ò—Å—Ç–∏–Ω—ã¬ª ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤–æ –≤—Å–µ—Ö —Å—Ñ–µ—Ä–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –∂–∏–∑–Ω–∏:\n"
        "‚úÖ –§–∞—Ä–¥ –∑–Ω–∞–Ω–∏—è\n"
        "‚úÖ –°–µ–º—å—è. –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –º—É–∂–∞ –∏ –∂–µ–Ω—ã.\n"
        "‚úÖ –í–æ—Å–ø–∏—Ç–∞–Ω–∏–µ –¥–µ—Ç–µ–π;\n"
        "‚úÖ –ñ–µ–Ω—Å–∫–∏–µ —Ç–µ–º—ã: –º–µ—Å—è—á–Ω—ã–µ, —Ä–æ–¥—ã –∏ –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤, —Ö–∏–¥–∂–∞–±, –∫–æ—Å–º–µ—Ç–∏–∫–∞;\n"
        "‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –∑–∞–∫—è—Ç;\n"
        "‚úÖ –•–∞–¥–∂\n\n"
        "–§–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è:\n"
        "üìç –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∞–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –Ω–∞ GetCourse, –≥–¥–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—å—Å—è.\n"
        "üìç –ü–æ–ø–∞–¥–∞–µ—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ, –≥–¥–µ –º–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è —Å–æ –≤—Å–µ–º–∏ —É—á–µ–Ω–∏–∫–∞–º–∏;\n"
        "üìç –í —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –ø—Ä—è–º—ã–µ —ç—Ñ–∏—Ä—ã –Ω–∞ —Å–∞–º—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã\n\n"
        "üïå –° –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –º—ã –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º 30% –≤ –∫–æ–ø–∏–ª–∫—É –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –º–µ—á–µ—Ç–∏. –ö–∞–∂–¥—ã–π –∏–∑ –≤–∞—Å –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é —ç—Ç–æ–≥–æ –±–ª–∞–≥–æ–≥–æ –¥–µ–ª–∞!"
    )

    await message.answer_photo(photo=photo, caption=text, reply_markup=kb)

@dp.message(F.text == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ–±—É—á–µ–Ω–∏–∏")
async def send_details_link(message: Message):
    DETAILS_URL = "https://example.com/education"  # –ó–¥–µ—Å—å –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é —Å—Å—ã–ª–∫—É
    await message.answer(f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ–±—É—á–µ–Ω–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –∑–¥–µ—Å—å:\n{DETAILS_URL}")

@dp.message(F.text == "–•–æ—á—É –≤ –∫–ª—É–±")
async def start_subscription(message: Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
            [KeyboardButton(text="üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (5 –¥–Ω–µ–π)")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ–±—É—á–µ–Ω–∏—é:\n"
        "üí≥ –ü–æ–ª–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —É—Ä–æ–∫–∞–º, —á–∞—Ç—É –∏ —ç—Ñ–∏—Ä—É\n"
        "üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ‚Äî 5 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n",
        reply_markup=kb
    )

@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ")
async def info_course(message: Message):
    kb = await get_main_menu_kb(message.from_user.id)
    await message.answer("–ó–¥–µ—Å—å –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ –∫—É—Ä—Å...\n\n–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'.", reply_markup=kb)

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: Message, state: FSMContext):
    await state.clear()
    kb = await get_main_menu_kb(message.from_user.id)
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb)

@dp.message(F.text == "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def subscribe(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ Airtable
    record = users_table.first(formula=f"{{user_id}} = {message.from_user.id}")
    
    # if record and 'end_date' in record['fields']:
    #     end_date = datetime.fromisoformat(record['fields']['end_date'])
    #     # –î–µ–ª–∞–µ–º –æ–±–µ –¥–∞—Ç—ã aware (—Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º)
    #     now = datetime.now().astimezone()  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    #     end_date = end_date.astimezone()  # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∫ end_date
    #     if end_date > now:
    #         days_left = (end_date - now).days
    #         kb = await get_main_menu_kb(message.from_user.id)
    #         await message.answer(
    #             f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π.",
    #             reply_markup=kb
    #         )
    #         return
    
    await message.answer("‚è≥ –ù–∞ —Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?", reply_markup=period_kb)
    await state.set_state(SubscribeSteps.choosing_period)

@dp.message(F.text == "üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (5 –¥–Ω–µ–π)")
async def start_trial(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name

    record = users_table.first(formula=f"{{user_id}} = {user_id}")
    fields = record["fields"] if record else {}

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–±–Ω–∏–∫
    if fields.get("trial_used", False):
        await message.answer("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
    required_fields = ["email", "fullname", "phone", "city"]
    missing_fields = [field for field in required_fields if not fields.get(field)]

    if not missing_fields:
        # –í—Å—ë –µ—Å—Ç—å ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–±–Ω–∏–∫ —Å—Ä–∞–∑—É
        await activate_trial(
            message=message,
            email=fields["email"],
            username=username,
            full_name=fields.get("fullname", ""),
            phone=fields.get("phone", ""),
            city=fields.get("city", "")
        )

        return

    # –î–∞–Ω–Ω—ã—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–∞—à–∏–≤–∞—Ç—å
    await state.update_data(missing_fields=missing_fields, username=username)

    next_field = missing_fields[0]
    if next_field == "email":
        await message.answer("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=cancel_kb)
        await state.set_state(SubscribeSteps.getting_email_trial)
    elif next_field == "fullname":
        await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–§–ò–û</b>:", reply_markup=cancel_kb)
        await state.set_state(SubscribeSteps.getting_fullname)
    elif next_field == "phone":
        await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=cancel_kb)
        await state.set_state(SubscribeSteps.getting_phone)
    elif next_field == "city":
        await message.answer("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:", reply_markup=cancel_kb)
        await state.set_state(SubscribeSteps.getting_city)


@dp.message(SubscribeSteps.choosing_period)
async def get_period(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        kb = await get_main_menu_kb(message.from_user.id)
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb)
        return
    period = message.text
    if period not in ["1 –º–µ—Å 1.344 —Ä—É–±.", "3 –º–µ—Å 3.744 —Ä—É–±.", "6 –º–µ—Å 6.994 —Ä—É–±.", "12 –º–µ—Å +–º–µ—Å. –ø–æ–¥–∞—Ä–æ–∫ 13.444 —Ä—É–±."]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏–∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=period_kb)
        return
    await state.update_data(period=period)
    await message.answer("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=cancel_kb)
    await state.set_state(SubscribeSteps.getting_email)

@dp.message(SubscribeSteps.getting_email)
async def get_email(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        kb = await get_main_menu_kb(message.from_user.id)
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb)
        return
    email = message.text.strip()
    await state.update_data(email=email)
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–§–ò–û</b>:", reply_markup=cancel_kb)
    await state.set_state(SubscribeSteps.getting_fullname)

@dp.message(SubscribeSteps.getting_fullname)
async def get_fullname(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        kb = await get_main_menu_kb(message.from_user.id)
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb)
        return
    fullname = message.text.strip()
    await state.update_data(fullname=fullname)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>:", reply_markup=cancel_kb)
    await state.set_state(SubscribeSteps.getting_phone)

@dp.message(SubscribeSteps.getting_phone)
async def get_phone(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        kb = await get_main_menu_kb(message.from_user.id)
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb)
        return

    phone = message.text.strip()
    await state.update_data(phone=phone)
    data = await state.get_data()

    period = data.get("period")  # üõ°Ô∏è –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ—Å—Ç–∞—ë–º

    if period:
        # –≠—Ç–æ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        await message.answer("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–≥–æ—Ä–æ–¥</b>:", reply_markup=cancel_kb)
        await state.set_state(SubscribeSteps.getting_city)
    else:
        # –≠—Ç–æ –ø—Ä–æ–±–Ω—ã–π –ø—É—Ç—å
        missing_fields = data.get("missing_fields", [])
        if "phone" in missing_fields:
            missing_fields.remove("phone")
        await state.update_data(missing_fields=missing_fields)

        if "city" in missing_fields:
            await message.answer("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:", reply_markup=cancel_kb)
            await state.set_state(SubscribeSteps.getting_city)
        else:
            username = data.get("username") or message.from_user.username or message.from_user.full_name
            await activate_trial(message, data.get("email"), username)
            await state.clear()


@dp.message(SubscribeSteps.getting_city)
async def get_city(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        kb = await get_main_menu_kb(message.from_user.id)
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb)
        return

    city = message.text.strip()
    await state.update_data(city=city)

    data = await state.get_data()
    period = data.get("period")

    if period:
        # –≠—Ç–æ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        await message.answer(
            f"""‚úÖ –û—Ç–ª–∏—á–Ω–æ!
–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>{get_price(period)}‚ÇΩ</b> –Ω–∞ –∫–∞—Ä—Ç—É:

<code>2204 3203 6606 1564 (–û–∑–æ–Ω –±–∞–Ω–∫, –ê–ª—ë–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞ –î–æ–±—ã–∫–æ)</code>

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞.
""",
            reply_markup=cancel_kb
        )
        await state.set_state(SubscribeSteps.waiting_payment)
    else:
        username = data.get("username") or message.from_user.username or message.from_user.full_name
        await activate_trial(
            message=message,
            email=data.get("email"),
            username=username,
            full_name=data.get("full_name"),
            phone=data.get("phone"),
            city=city
        )




        await state.clear()



@dp.message(SubscribeSteps.waiting_payment, F.photo)
async def handle_payment(message: Message, state: FSMContext):
    data = await state.get_data()
    username = message.from_user.username or message.from_user.full_name
    kb = await get_main_menu_kb(message.from_user.id)
    await message.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=kb)
    for admin_id in ADMINS:
        try:

            short_period_code = get_months_by_text(data['period'])

            await bot.send_photo(
    admin_id,
    photo=message.photo[-1].file_id,
    caption=f"""üí∏ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂:

üë§ @{username}
üÜî {message.from_user.id}
üìß {data['email']}
ü™™ –§–ò–û: {data['fullname']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}
üèôÔ∏è –ì–æ—Ä–æ–¥: {data['city']}
üìÜ –ü–æ–¥–ø–∏—Å–∫–∞: {data['period']}
""",
    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                callback_data=f"approve:{message.from_user.id}|{short_period_code}"
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data=f"deny:{message.from_user.id}"
            )
        ]
    ])
)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –ë–î –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    record = users_table.first(formula=f"{{user_id}} = {message.from_user.id}")
    fields = {
        'user_id': message.from_user.id,
        'username': username,
        'email': data['email'],
        'fullname': data['fullname'],
        'phone': data['phone'],
        'city': data['city'],
        'status': 'pending'
    }
    if record:
        users_table.update(record["id"], fields)
    else:
        users_table.create(fields)

    await state.clear()


@dp.message(F.text.startswith("/approve_"))
async def approve_payment(message: Message):
    if message.from_user.id not in ADMINS:
        return

    parts = message.text.split("_")
    user_id = int(parts[1])
    period_text = "_".join(parts[2:])
    months = get_months_by_text(period_text)

    approver_name = message.from_user.full_name

    try:
        user = await bot.get_chat(user_id)
        username = user.username or user.full_name
    except Exception:
        username = ""

    now = datetime.now(timezone.utc)

    record = users_table.first(formula=f"{{user_id}} = {user_id}")
    fields = record['fields'] if record else {}
    record_id = record['id'] if record else None

    current_end = None
    if "end_date" in fields:
        try:
            current_end = datetime.fromisoformat(fields["end_date"])
        except Exception:
            pass

    now = datetime.now(timezone.utc)
    if current_end and current_end > now:
        new_end = current_end + timedelta(days=30 * months)
    else:
        new_end = now + timedelta(days=30 * months)

    users_table.update(record_id, {
        "end_date": new_end.isoformat(),
        "username": username
    })

    # –†–∞–∑–±–∞–Ω
    try:
        await bot.unban_chat_member(GROUP_ID, user_id)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    # –°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    try:
        invite_link = await bot.create_chat_invite_link(
            chat_id=GROUP_ID,
            name=f"Link for {user_id}",
            expire_date=datetime.now() + timedelta(days=1),
            member_limit=1
        )
    except Exception as e:
        await bot.send_message(user_id, "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(
            user_id,
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º <b>{approver_name}</b>!\n"
            f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É:\n{invite_link.invite_link}",
            parse_mode="HTML"
        )
    except Exception as e:
        await bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMINS:
        if admin_id != message.from_user.id:
            try:
                await bot.send_message(
                    admin_id,
                    f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º <b>{approver_name}</b> –¥–ª—è ID {user_id}",
                    parse_mode="HTML"
                )
            except Exception:
                pass

@dp.message(F.text.startswith("/deny_"))
async def deny_payment(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    user_id = int(message.text.split("_")[1])
    kb = await get_main_menu_kb(user_id)
    await bot.send_message(user_id, "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=kb)

@dp.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def profile(message: Message):
    record = users_table.first(formula=f"{{user_id}} = {message.from_user.id}")
    kb = await get_main_menu_kb(message.from_user.id)
    
    if record and 'end_date' in record['fields']:
        fields = record.get("fields", {})
        end_date = datetime.fromisoformat(fields["end_date"])
        now = datetime.now(timezone.utc)
        if end_date > now:
            days_left = (end_date - now).days
            status = "üîπ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥" if days_left <= 5 else "üîπ –ü–æ–ª–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
            await message.answer(
                f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n{status}\n"
                f"üìÜ –î–æ: {end_date.strftime('%d.%m.%Y')}\n"
                f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}",
                reply_markup=kb
            )
            return
    
    await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=kb)

@dp.message(F.text == "üõ†Ô∏è –ê–¥–º–∏–Ω-–º–µ–Ω—é")
async def admin_menu(message: Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return
    await state.clear()
    await message.answer("–í—ã –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=admin_menu_kb)

@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
async def list_subscribers(message: Message):
    if message.from_user.id not in ADMINS:
        return

    records = users_table.all()
    if not records:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return

    text = "<b>–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b>\n\n"
    chunks = []

    for record in records:
        f = record.get("fields", {})
        user_id = f.get("user_id", "N/A")
        username = f.get("username", "")
        fullname = f.get("fullname", "")
        phone = f.get("phone", "")
        city = f.get("city", "")
        email = f.get("email", "")
        end_date = f.get("end_date", "N/A")

        username_display = f'<a href="https://t.me/{username}">@{username}</a>' if username else "‚Äî"

        entry = (
            f"<b>üÜî ID:</b> <code>{user_id}</code>\n"
            f"<b>üë§ Username:</b> {username_display}\n"
            f"<b>üìõ –§–ò–û:</b> {fullname}\n"
            f"<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
            f"<b>üèôÔ∏è –ì–æ—Ä–æ–¥:</b> {city}\n"
            f"<b>üìß Email:</b> {email}\n"
            f"<b>üìÜ –î–æ:</b> {end_date}\n\n"
        )

        if len(text) + len(entry) > 4000:
            chunks.append(text)
            text = ""
        text += entry

    if text:
        chunks.append(text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
    for chunk in chunks:
        await message.answer(chunk, parse_mode="HTML", disable_web_page_preview=True)


@dp.message(F.text == "üîÑ –ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def cancel_subscribe_start(message: Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return
    await state.set_state(SubscribeSteps.admin_cancel)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'.")

@dp.message(SubscribeSteps.admin_cancel)
async def cancel_subscribe_process(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–∞ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=admin_menu_kb)
        return
    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'.")
        return
    record = users_table.first(formula=f"{{user_id}} = {user_id}")
    if record:
        users_table.delete(record["id"])
    await bot.ban_chat_member(GROUP_ID, user_id)
    await message.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∞ –∏ –æ–Ω –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã.", reply_markup=admin_menu_kb)
    await state.clear()

@dp.message(F.text == "üì§ –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
async def notify_all_subscribers(message: Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º:")
    await state.set_state(SubscribeSteps.admin_broadcast)

@dp.message(SubscribeSteps.admin_broadcast)
async def process_broadcast(message: Message, state: FSMContext):
    text = message.text
    records = users_table.all()
    success, failed = 0, 0

    for record in records:
        user_id = record["fields"].get("user_id")
        if user_id:
            try:
                await bot.send_message(user_id, f"üì¢ {text}")
                success += 1
            except:
                failed += 1
    await message.answer(f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {failed}")
    await state.clear()

@dp.message(F.text == "üîç –ù–∞–π—Ç–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –ø–æ username")
async def start_search_username(message: Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ @:")
    await state.set_state(SubscribeSteps.admin_search)

@dp.message(SubscribeSteps.admin_search)
async def process_search_username(message: Message, state: FSMContext):
    username_to_find = message.text.lower().strip().lstrip("@")
    record = users_table.first(formula=f"LOWER({{username}}) = '{username_to_find}'")
    if record:
        fields = record["fields"]
        user_id = fields.get("user_id", "N/A")
        end_date = fields.get("end_date", "N/A")
        username = fields.get("username", "N/A")
        await message.answer(f"üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username}:\nID: {user_id}\n–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {end_date}")
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.clear()

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –≤—Ä—É—á–Ω—É—é")
async def admin_manual_add_start(message: Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return
    await state.set_state(SubscribeSteps.admin_manual_add_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'.")

@dp.message(SubscribeSteps.admin_manual_add_id)
async def manual_add_id(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_menu_kb)
        return
    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")
        return
    await state.update_data(manual_user_id=user_id)
    await state.set_state(SubscribeSteps.admin_manual_add_username)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @) –∏–ª–∏ '–Ω–µ—Ç', –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç.")

@dp.message(SubscribeSteps.admin_manual_add_username)
async def manual_add_username(message: Message, state: FSMContext):
    username = message.text.strip().lower()
    if username == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_menu_kb)
        return
    if username == "–Ω–µ—Ç":
        username = ""
    await state.update_data(manual_username=username)
    await state.set_state(SubscribeSteps.admin_manual_add_days)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–Ω—è—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 28).")

@dp.message(SubscribeSteps.getting_email_trial)
async def process_trial_email(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        kb = await get_main_menu_kb(message.from_user.id)
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb)
        return

    email = message.text.strip()
    await state.update_data(email=email)

    user_id = message.from_user.id
    record = users_table.first(formula=f"{{user_id}} = {user_id}")
    fields = record["fields"] if record else {}

    # –°–æ–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è (—É–∂–µ —Å —É—á–µ—Ç–æ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ email)
    missing_fields = []
    if not fields.get("fullname"):
        missing_fields.append("fullname")
    if not fields.get("phone"):
        missing_fields.append("phone")
    if not fields.get("city"):
        missing_fields.append("city")

    # –ï—Å–ª–∏ –≤—Å—ë –µ—Å—Ç—å ‚Äî —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
    if not missing_fields:
        username = message.from_user.username or message.from_user.full_name
        await activate_trial(
            message=message,
            email=email,
            username=username,
            full_name=fields.get("fullname", ""),
            phone=fields.get("phone", ""),
            city=fields.get("city", "")
        )

        await state.clear()
    else:
        await state.update_data(missing_fields=missing_fields)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        next_field = missing_fields[0]
        if next_field == "fullname":
            await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–§–ò–û</b>:", reply_markup=cancel_kb)
            await state.set_state(SubscribeSteps.getting_fullname)
        elif next_field == "phone":
            await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=cancel_kb)
            await state.set_state(SubscribeSteps.getting_phone)
        elif next_field == "city":
            await message.answer("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:", reply_markup=cancel_kb)
            await state.set_state(SubscribeSteps.getting_city)

@dp.message(SubscribeSteps.admin_manual_add_days)
async def manual_add_days(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_menu_kb)
        return
    try:
        days = int(message.text)
        if days <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).")
        return

    data = await state.get_data()
    user_id = data.get("manual_user_id")
    username = data.get("manual_username")
    now = datetime.now(timezone.utc)
    new_end = now + timedelta(days=days)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    record = users_table.first(formula=f"{{user_id}} = {user_id}")
    fields = record["fields"] if record else {}

    users_table.update(record["id"] if record else None, {
        "user_id": user_id,
        "end_date": new_end.isoformat(),
        "username": username,
        "email": fields.get("email", ""),
        "fullname": fields.get("fullname", ""),
        "phone": fields.get("phone", ""),
        "city": fields.get("city", "")
    })

    try:
        await bot.unban_chat_member(GROUP_ID, user_id)
    except Exception as e:
        print(f"unban error: {e}")

    try:
        invite_link = await bot.create_chat_invite_link(
            chat_id=GROUP_ID,
            name=f"Manual link for {user_id}",
            expire_date=int((datetime.now() + timedelta(days=days)).timestamp()),
            member_limit=1
        )
        await bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é.\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {new_end.strftime('%d.%m.%Y')}.\n"
            f"–í–æ—Ç –≤–∞—à–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É (–∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π):\n{invite_link.invite_link}"
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username if username else '–±–µ–∑ username'}) –¥–æ–±–∞–≤–ª–µ–Ω —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ {days} –¥–Ω–µ–π –¥–æ {new_end.strftime('%d.%m.%Y')}.", reply_markup=admin_menu_kb)
    await state.clear()

def get_price(period_text: str) -> int:
    prices = {
        "1 –º–µ—Å 1.344 —Ä—É–±.": 1344,
        "3 –º–µ—Å 3.744 —Ä—É–±.": 3744,
        "6 –º–µ—Å 6.994 —Ä—É–±.": 6994,
        "12 –º–µ—Å +–º–µ—Å. –ø–æ–¥–∞—Ä–æ–∫ 13.444 —Ä—É–±.": 13444,
    }
    return prices.get(period_text, 0)

def get_months_by_text(period_text: str) -> int:
    mapping = {
        "1 –º–µ—Å 1.344 —Ä—É–±.": 1,
        "3 –º–µ—Å 3.744 —Ä—É–±.": 3,
        "6 –º–µ—Å 6.994 —Ä—É–±.": 6,
        "12 –º–µ—Å +–º–µ—Å. –ø–æ–¥–∞—Ä–æ–∫ 13.444 —Ä—É–±.": 13,
    }
    return mapping.get(period_text, 0)

@dp.callback_query(F.data.startswith("approve:"))
async def approve_callback(call: CallbackQuery):
    if call.from_user.id not in ADMINS:
        return await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)

    data = call.data.split(":")[1]  # —Ñ–æ—Ä–º–∞—Ç: approve:user_id|months
    try:
        user_id_str, months_str = data.split("|")
        user_id = int(user_id_str)
        months = int(months_str)
    except Exception:
        return await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)

    now = datetime.now(timezone.utc)

    # üß† –ó–ê–ú–ï–ù–ê SQLite ‚Üí Airtable:
    record = users_table.first(formula=f"{{user_id}} = {user_id}")
    fields = record["fields"] if record else {}
    record_id = record["id"] if record else None

    current_end = None
    try:
        if "end_date" in fields:
            current_end = datetime.fromisoformat(fields["end_date"])
    except:
        current_end = None

    if current_end and current_end > now:
        new_end = current_end + timedelta(days=30 * months)
    else:
        new_end = now + timedelta(days=30 * months)

    users_table.update(record_id, {
        "user_id": user_id,
        "username": call.from_user.username or "",
        "email": fields.get("email", ""),
        "fullname": fields.get("fullname", ""),
        "phone": fields.get("phone", ""),
        "city": fields.get("city", ""),
        "end_date": new_end.isoformat()
    })


    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ª–æ–≥–∏–∫–æ–π: —Ä–∞–∑–±–∞–Ω, —Å—Å—ã–ª–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
    try:
        await bot.unban_chat_member(GROUP_ID, user_id)
        invite_link = await bot.create_chat_invite_link(
            chat_id=GROUP_ID,
            name=f"Link for {user_id}",
            expire_date=datetime.now() + timedelta(days=1),
            member_limit=1
        )
        await bot.send_message(
            user_id,
            f"""‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∫–ª—É–±—É <b>¬´–î–∏–∞–ª–æ–≥ –ò—Å—Ç–∏–Ω—ã¬ª</b>!

1. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ‚Äî <a href="{invite_link.invite_link}">–≤–æ—Ç —Å—Å—ã–ª–∫–∞</a>. –ó–¥–µ—Å—å –ø—Ä–æ—Ö–æ–¥—è—Ç –ø—Ä—è–º—ã–µ —ç—Ñ–∏—Ä—ã, –∞ —Ç–∞–∫–∂–µ –≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ —É—á–µ–Ω–∏–∫–∞–º–∏ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ –∫–ª—É–±–∞.

2. –ù–∞ –ø–æ—á—Ç—É –≤–∞–º –ø—Ä–∏—à—ë–ª –¥–æ—Å—Ç—É–ø –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É GetCourse.

3. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ‚Äî —Å—Ä–∞–∑—É –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É: <a href="https://wa.me/79001234567">–Ω–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp</a>.
""",
            parse_mode="HTML"
        )
        await call.message.reply(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMINS:
            if admin_id != call.from_user.id:
                try:
                    await bot.send_message(
                        admin_id,
                        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º <b>{call.from_user.full_name}</b>.",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    print(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
    except Exception as e:
        await bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è {user_id}: {e}")
        await call.message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    await call.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")

@dp.message(F.text == "üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (5 –¥–Ω–µ–π)")
async def start_trial(message: Message, state: FSMContext):
    async with aiosqlite.connect("users.db") as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∫–∞ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–Ω—É—é)
        async with db.execute("SELECT end_date FROM users WHERE user_id = ?", (message.from_user.id,)) as cursor:
            row = await cursor.fetchone()
            if row and row[0]:
                end_date = datetime.fromisoformat(row[0])
                if end_date > datetime.now().astimezone():
                    kb = await get_main_menu_kb(message.from_user.id)
                    await message.answer(
                        "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.",
                        reply_markup=kb
                    )
                    return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    await message.answer("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:", reply_markup=cancel_kb)
    await state.set_state(SubscribeSteps.getting_email_trial)

@dp.callback_query(F.data.startswith("deny:"))
async def deny_callback(call: CallbackQuery):
    if call.from_user.id not in ADMINS:
        return await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)

    user_id_str = call.data.split(":")[1]
    try:
        user_id = int(user_id_str)
        kb = await get_main_menu_kb(user_id)
        await bot.send_message(user_id, "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=kb)
        await call.message.reply(f"‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        await call.message.reply(f"–û—à–∏–±–∫–∞: {e}")

    await call.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")

async def on_startup():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Airtable
    try:
        test_records = users_table.all(max_records=1)
        print("Airtable connection successful")
    except Exception as e:
        print(f"Airtable connection error: {e}")
        raise

# ... (–ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ—Å–ª–µ @dp.callback_query(F.data.startswith("deny:"))  

async def activate_trial(message: Message, email: str, username: str, full_name: str, phone: str, city: str):
    user_id = message.from_user.id
    now = datetime.now(timezone.utc)
    trial_days = 5
    end_date = (now + timedelta(days=trial_days)).isoformat()

    fields = {
        "user_id": user_id,
        "username": username,
        "email": email,
        "fullname": full_name,
        "phone": phone,
        "city": city,
        "end_date": end_date,
        "trial_used": True
    }

    try:
        record = users_table.first(formula=f"{{user_id}} = {user_id}")
        if record:
            users_table.update(record["id"], fields)
        else:
            users_table.create(fields)

        await bot.unban_chat_member(GROUP_ID, user_id)

        invite_link = await bot.create_chat_invite_link(
            chat_id=GROUP_ID,
            name=f"Trial link for {user_id}",
            expire_date=datetime.now() + timedelta(days=1),
            member_limit=1
        )

        await bot.send_message(
            message.chat.id,
            f"""‚úÖ –ì–æ—Ç–æ–≤–æ!
–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ {trial_days} –¥–Ω–µ–π.

üîó <b>–í–æ—Ç –≤–∞—à–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É:</b>
{invite_link.invite_link}

‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞ –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤—Ö–æ–¥–∞.
""",
            parse_mode="HTML",
            reply_markup=await get_main_menu_kb(user_id)
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:\n<code>{e}</code>")




async def check_trial_periods():
    while True:
        now = datetime.now().astimezone()
        records = users_table.all()

        for record in records:
            fields = record.get("fields", {})
            user_id = fields.get("user_id")
            end_date_str = fields.get("end_date")

            if not user_id or not end_date_str:
                continue

            try:
                end_date = datetime.fromisoformat(end_date_str).astimezone()
            except:
                continue

            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
            if end_date < now:
                try:
                    await bot.ban_chat_member(GROUP_ID, user_id)
                    await bot.unban_chat_member(GROUP_ID, user_id)
                    print(f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã (–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å)")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {user_id}: {e}")
            # –ï—Å–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è
            elif (end_date.date() - now.date()).days == 0:
                try:
                    await bot.send_message(
                        user_id,
                        "‚ö†Ô∏è –í–∞—à –¥–æ—Å—Ç—É–ø –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è!\n"
                        "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–ª–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞."
                    )
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {user_id}: {e}")

        await asyncio.sleep(6 * 60 * 60)  # –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤

# –î–∞–ª–µ–µ –∏–¥–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è main() –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–µ...

async def main():
    import logging
    logging.basicConfig(level=logging.INFO)

    await on_startup()  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    # +++ –í–æ—Ç —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–æ–±–∞–≤–ª—è–µ–º! +++
    asyncio.create_task(check_trial_periods())  # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–±–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤

    await dp.start_polling(bot)  # –°—Ç–∞—Ä—Ç –±–æ—Ç–∞

if __name__ == "__main__":
    asyncio.run(main())